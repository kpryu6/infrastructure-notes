
# Docker

- `컨테이너 기반`의 오픈소스 가상화 플랫폼
- **Go 언어**

<p align="center"><img src="https://devocean.sk.com/CKFinderJava/userfiles/images/docker-logo.png"></p>

#
</br>

## Container

**해상 운송업**

- `ex) 선박을 이용하여 수출입하는 해상 운송업`
  - 선적물들이 거대한 상자모양 컨테이너에 패키징 되어 화물선에 선적
  - 해상 운송업자는 안에 어떤 것들이 있는지 알 필요 X
  
**도커**

- 도커도 서비스 운용에 필요한 실행환경, 라이브러리, 소프트웨어, 시스템 도구, 코드 등을 컨테이너라는 표준화된 단위로 추상화
  - 이 컨테이너는 컴퓨터 환경에 구애받지 않고 서비스가 실행할 수 있도록 함
  
- 서비스 관리자는 `도커라이징(Dockerizing)` 된 컨테이너가 어떤 런타임을 필요로 하는지, 어떤 라이브러리, 코드를 필요로 하는지 알 필요 X
- 실행된 서비스는 컴퓨팅 환경과 독립된 가상의 환경에서 실행 & 일관된 결과 보장

#
</br>

## 서버 관리

- 수많은 프로그래밍 언어
- 많은 라이브러리 의존성
- 여러개의 DBMS

**전통적 서버 관리**

- 개발환경과 라이브러리 버전 등이 맞는지 직접 다 보고 맞추어야 함
- 서버 확장 시, 전 서버와 똑같은 프로세스대로 환경 일일이 셋업
- 즉, 수작업으로 모든 것을 세팅

**도커를 사용한 서버 관리**

- OS 환경설정, 언어, 라이브러리, 시스템 도구 등이 설치된 환경을 그대로 이미지로 빌드 가능
- 이미지는 `Dockerfile`을 이용하여 생성
- 이미지를 그래도 프로덕션 서버에 전달
- 이미지를 기반한 컨테이너 생성 후 실행

- 도커를 통한 패키징 후 컨테이너 생성 -> Java, Python 등 모두 동일한 배포 프로세스
- 컨테이너 삭제 시 모든 데이터 초기화
  - `해결법`
  - 외부 저장장치에 링크
  - 별도의 클라우드 스토리지 사용 `ex) AWS S3 등`
  
  #
  </br>
  
# Container vs VM

<p align="center"><img src="https://devocean.sk.com/CKFinderJava/userfiles/images/vm%20vs%20docker.png"></p>

- 왼쪽 : 도커의 구조, 오른쪽 : VM의 구조

**VM**

- 하이퍼바이저 (Hypervisor) 
  - Virtual Box 나 VM Ware 와 같은 `가상 머신을 생성하고 실행하는 프로세스`
  - 하드웨어를 에뮬레이션하여 하나의 컴퓨터에서 `다수의 운영체제를 운영할 수 있게 해주는 소프트웨어`
  
- Host OS : 하이퍼바이저 자체 실행
- Guest OS : 하이퍼바이저가 구동하는 가상화된 OS

**도커**

- Guest OS 없이 프로세스를 격리하는 방식으로 Host OS의 모든 기능과 리소스를 컨테이너 간 공유

#
</br>
